if (!project.plugins.findPlugin(com.zeroc.gradle.icebuilder.slice.SlicePlugin)) {
    project.apply(plugin: com.zeroc.gradle.icebuilder.slice.SlicePlugin)
}

if(this.cppPlatform) {
    slice.cppPlatform = this.cppPlatform
}

if(this.cppConfiguration) {
    slice.cppConfiguration = this.cppConfiguration
}

if(this.iceHome) {
    slice.iceHome = this.iceHome
}

buildscript {

    ext.iceMavenRepo = System.env.ICE_MAVEN_REPOSITORY ? System.env.ICE_MAVEN_REPOSITORY : "repo.zeroc.com"
    ext.useLocalOnly = gradle.startParameter.isOffline()

    //
    // If iceBuilderHome is set add its lib directory it to the local maven repositories
    // so we can build using a local plugin version
    //
    if (iceBuilderHome) {
        def builder  = new File([iceBuilderHome, "build", "libs"].join(File.separator))

        if(builder.exists()) {
            repositories {
                flatDir dirs: "file://${builder.getCanonicalPath()}"
            }
        }
    }

    repositories {
        if (!useLocalOnly) {
            maven {
                url "https://${iceMavenRepo}/nexus/content/repositories/releases"
            }
        }
    }

    dependencies {
        classpath group: 'com.zeroc.gradle.ice-builder', name: 'slice', version: "${iceBuilderVersion}"
    }
}

ext.generatedDir = "$project.buildDir/generated"
ext.useLocalOnly = gradle.startParameter.isOffline()

// Android does not have a compileJava task
if(!(project.hasProperty('android') && project.android.sourceSets)) {
    compileJava {
        options.debug = debug
    }
}

def env = System.getenv()

// Check if we need to append version suffix to jar files
ext.versionSuffix = ""
def iceJar = new File("${slice.jarDir}/ice-compat-${slice.iceVersion}.jar")
if(iceJar.exists()) {
    ext.versionSuffix = "-${slice.iceVersion}"
}

def demoJar(name) {
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}

ext {
    demoJar = this.&demoJar
}

def localDependency(artifactId) {
    return "com.zeroc:${artifactId}:${slice.iceVersion}"
}

ext {
    localDependency = this.&localDependency
}
